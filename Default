function Log-Message {
    param (
        [string]$message
    )
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "$timestamp - $message"
    Write-Output $logMessage
}

function Step-Through {
    param (
        [string]$message
    )
    Log-Message $message
    Write-Host "Press space to continue..."
    while ($true) {
        $key = [System.Console]::ReadKey($true)
        if ($key.Key -eq [System.ConsoleKey]::Spacebar) {
            break
        }
    }
}

function Run-CustomCommand {
    Step-Through "Starting custom command: Start-OSDCloud"
    try {
        Start-Process -FilePath "powershell.exe" -ArgumentList "Start-OSDCloud -Firmware -ZTI -OSName 'Windows 11 24H2 x64' -OSEdition Enterprise -OSLanguage en-us -OSActivation Volume" -Wait
        Log-Message "Custom command completed successfully."
    } catch {
        Log-Message "Failed to run Start-OSDCloud command: $_"
    }
}

function Search-PatchedBootfiles {
    Step-Through "Searching for 'PatchedBootfiles' folder on all drives."
    $patchedBootFilesPath = Get-ChildItem -Path C:\ -Recurse -Directory -ErrorAction SilentlyContinue | Where-Object { $_.Name -eq "PatchedBootfiles" } | Select-Object -First 1

    if (-not $patchedBootFilesPath) {
        Log-Message "PatchedBootfiles folder not found on any drive."
    } else {
        Log-Message "Found 'PatchedBootfiles' folder at: $($patchedBootFilesPath.FullName)"
    }

    return $patchedBootFilesPath
}

function Mount-SystemVolume {
    Step-Through "Mounting system volume to S: drive."
    try {
        Start-Process -FilePath "cmd.exe" -ArgumentList "/c mountvol S: /S" -Wait
        Log-Message "System volume mounted successfully."
    } catch {
        Log-Message "Failed to mount system volume: $_"
    }
}

function Copy-Files {
    param (
        [string]$patchedBootFilesPath
    )
    Step-Through "Preparing to copy files from 'PatchedBootfiles' to S: drive."
    Log-Message "PatchedBootfiles folder path: $patchedBootFilesPath"
    Step-Through "Press space to continue with copying files."
    try {
        Copy-Item -Path "$patchedBootFilesPath\*" -Destination "S:\" -Recurse -Force
        Log-Message "Files copied successfully."
    } catch {
        Log-Message "Failed to copy files: $_"
    }
}

function Unmount-SystemVolume {
    Step-Through "Unmounting system volume from S: drive."
    try {
        Start-Process -FilePath "cmd.exe" -ArgumentList "/c mountvol S: /d" -Wait
        Log-Message "System volume unmounted successfully."
    } catch {
        Log-Message "Failed to unmount system volume: $_"
    }
}

function Search-UpdatePackage {
    Step-Through "Searching for 'windows11.0-kb5058411-x64_fc93a482441b42bcdbb035f915d4be2047d63de5.msu' on all drives."
    $updatePackagePath = Get-ChildItem -Path C:\ -Recurse -File -ErrorAction SilentlyContinue | Where-Object { $_.Name -eq "windows11.0-kb5058411-x64_fc93a482441b42bcdbb035f915d4be2047d63de5.msu" } | Select-Object -First 1

    if ($updatePackagePath) {
        Log-Message "Found update package at: $($updatePackagePath.FullName)"
        $destinationPath = $updatePackagePath.FullName
    } else {
        Log-Message "Update package not found on any drive. Downloading from the web."
        $updateUrl = "https://catalog.sf.dl.delivery.mp.microsoft.com/filestreamingservice/files/770c53ae-5610-402f-b5e9-fe86142003cc/public/windows11.0-kb5058411-x64_fc93a482441b42bcdbb035f915d4be2047d63de5.msu"
        $destinationPath = "C:\OSDCloud\CU\windows11.0-kb5058411-x64_fc93a482441b42bcdbb035f915d4be2047d63de5.msu"
        $expectedHash = "fc93a482441b42bcdbb035f915d4be2047d63de5"

        New-Item -ItemType Directory -Path "C:\OSDCloud\CU" -Force

        Step-Through "Downloading update package from $updateUrl using curl"
        try {
            Invoke-WebRequest -Uri $updateUrl -OutFile $destinationPath
            Log-Message "Update package downloaded successfully to $destinationPath"
        } catch {
            Log-Message "Failed to download update package using curl: $_"
        }
    }

    return $destinationPath, $expectedHash
}

function Verify-SHA1 {
    param (
        [string]$destinationPath,
        [string]$expectedHash
    )
    Step-Through "Verifying the SHA1 hash of the update file."
    try {
        $fileHash = Get-FileHash -Path $destinationPath -Algorithm SHA1
        if ($fileHash.Hash.ToLower() -eq $expectedHash.ToLower()) {
            Log-Message "SHA1 hash verification successful."
        } else {
            Log-Message "SHA1 hash verification failed. Expected: $expectedHash, Got: $($fileHash.Hash)"
        }
    } catch {
        Log-Message "Failed to verify SHA1 hash: $_"
    }
}

function Add-WindowsPackage {
    param (
        [string]$destinationPath
    )
    $scratchDirectory = "C:\windows\temp\CUScratch"
    New-Item -ItemType Directory -Path $scratchDirectory -Force

    Step-Through "Adding Windows package from $destinationPath"
    try {
        Add-WindowsPackage -Path "C:\" -PackagePath $destinationPath -ScratchDirectory $scratchDirectory
        Log-Message "Windows package added successfully."
    } catch {
        Log-Message "Failed to add Windows package: $_"
    }
}

function Run-DISMCommand {
    $resetBaseScratchDirectory = "C:\windows\temp\ResetBaseScratch"
    New-Item -ItemType Directory -Path $resetBaseScratchDirectory -Force

    Step-Through "Running DISM command for cleanup and reset base."
    try {
        Start-Process -FilePath "cmd.exe" -ArgumentList "/c Dism.exe /image:C:\ /Cleanup-Image /StartComponentCleanup /ResetBase /ScratchDirectory:$resetBaseScratchDirectory" -Wait
        Log-Message "DISM command completed successfully."
    } catch {
        Log-Message "Failed to run DISM command: $_"
    }
}

function Restart-Computer {
    Step-Through "Restarting the computer."
    try {
        Restart-Computer -Force
    } catch {
        Log-Message "Failed to restart the computer: $_"
    }
}

# Main execution
#Run-CustomCommand
$patchedBootFilesPath = Search-PatchedBootfiles
if ($patchedBootFilesPath) {
    Mount-SystemVolume
    Copy-Files -patchedBootFilesPath $patchedBootFilesPath.FullName
    Unmount-SystemVolume
}
$destinationPath, $expectedHash = Search-UpdatePackage
Verify-SHA1 -destinationPath $destinationPath -expectedHash $expectedHash
Add-WindowsPackage -destinationPath $destinationPath
Run-DISMCommand
Restart-Computer
